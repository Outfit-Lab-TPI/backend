services:
  # ===== Backend Application =====
  outfitlab-backend:
    build: 
      context: .
      dockerfile: Dockerfile.multistage
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_SECURITY_USER_NAME=${SPRING_SECURITY_USER}
      - SPRING_SECURITY_USER_PASSWORD=${SPRING_SECURITY_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JAVA_OPTS=${JAVA_OPTS}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - outfitlab-network

  # ===== PostgreSQL Database =====
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_ROOT_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ROOT_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ROOT_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - outfitlab-network

  # ===== Redis Cache (para queue y cache) =====
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - outfitlab-network

# ===== Volumes =====
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# ===== Networks =====
networks:
  outfitlab-network:
    driver: bridge